generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Position {
  title     String
  startAt   String
  endAt     String?
}

model Company {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  startAt          String
  endAt            String?
  location         String
  reasonsOfLeaving String[]
  position         String 
  positions        Position[]
  logo             String
}

type Location {
  city String
  country String
}

model Education {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  location       Location
  startAt        String
  endAt          String?
  name           String
  logo           String
  title          String
  degree         String
}

enum TechnologySectionType {
  ReactJS
  NodeJS
  Database
  AWS
  ContinuousIntegrationAndContinuousDeployment
  Docker
  ExternalService
  Bot
}

enum TechnologySubSectionType {
  ReactJSVersion
  ReactJSFramework
  Testing
  Styling
  StylingLibrary
  StateManagement
  NodeJSVersion
  NodeJSFramework
  TemplatingEngine
  DatabaseType
  DatabaseORM
}

model TechnologySubSection {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  type       TechnologySubSectionType
  title      String
}

model Technology {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  section             TechnologySectionType
  subSection          TechnologySubSectionType?
  featured            Boolean
  technologySection   TechnologySection  @relation(fields: [section], references: [type])
}

model TechnologySection {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  type          TechnologySectionType @unique
  title         String
  logo          String
  technologies  Technology[]
}

type Contacts {
  phone      String
  email      String
  linkedin   String
  github     String
}

model Meta {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  contacts      Contacts
  location      Location
  title         String
  description   String
  firstName     String
  lastName      String
  avatar        String
}

model Feedback {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  topic    String
  reviews  String[]
}

model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}